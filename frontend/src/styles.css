import React, { createContext, useState, useContext, useEffect, ReactNode, Dispatch, SetStateAction } from 'react';

interface User {
  username: string;
  role: string;
}

interface UserContextType {
  user: User | null;
  setUser: Dispatch<SetStateAction<User | null>>;
  loading: boolean;
}

// Create context with default values
const UserContext = createContext<UserContextType>({
  user: null,
  setUser: () => null,
  loading: true,
});

// UserProvider component to provide the user's role to its children
export const UserProvider: React.FC<{ children: ReactNode }> = ({ children }) => {
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const username = localStorage.getItem('username');
    const role = localStorage.getItem('role');

    if (username && role) {
      setUser({ username, role });
    }
    setLoading(false);
  }, []);

  return (
    <UserContext.Provider value={{ user, setUser, loading }}>
      {children}
    </UserContext.Provider>
  );
};

// Custom hook to access the user's role
export const useUser = () => {
  return useContext(UserContext);
};





// import React, { createContext, useState, useContext, useEffect, ReactNode, Dispatch, SetStateAction } from 'react';

// interface User {
//   username: string;
//   role: string;
// }

// interface UserContextType {
//   user: User | null;
//   setUser: Dispatch<SetStateAction<User | null>>;
//   loading: boolean;
// }

// // Create context with default values
// const UserContext = createContext<UserContextType>({
//   user: null,
//   setUser: () => null,
//   loading: true,
// });

// // UserProvider component to provide the user's role to its children
// export const UserProvider: React.FC<{ children: ReactNode }> = ({ children }) => {
//   const [user, setUser] = useState<User | null>(null);
//   const [loading, setLoading] = useState(true);

//   useEffect(() => {
//     const username = localStorage.getItem('username');
//     const role = localStorage.getItem('role');

//     if (username && role) {
//       setUser({ username, role });
//     }
//     setLoading(false);
//   }, []);

//   return (
//     <UserContext.Provider value={{ user, setUser, loading }}>
//       {children}
//     </UserContext.Provider>
//   );
// };

// // Custom hook to access the user's role
// export const useUser = () => {
//   return useContext(UserContext);
// };
